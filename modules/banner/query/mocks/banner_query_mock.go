// Code generated by MockGen. DO NOT EDIT.
// Source: modules/banner/query/query.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/azbyluthfan/hello-banner/modules/banner/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockBannerQuery is a mock of BannerQuery interface
type MockBannerQuery struct {
	ctrl     *gomock.Controller
	recorder *MockBannerQueryMockRecorder
}

// MockBannerQueryMockRecorder is the mock recorder for MockBannerQuery
type MockBannerQueryMockRecorder struct {
	mock *MockBannerQuery
}

// NewMockBannerQuery creates a new mock instance
func NewMockBannerQuery(ctrl *gomock.Controller) *MockBannerQuery {
	mock := &MockBannerQuery{ctrl: ctrl}
	mock.recorder = &MockBannerQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBannerQuery) EXPECT() *MockBannerQueryMockRecorder {
	return m.recorder
}

// Fetch mocks base method
func (m *MockBannerQuery) Fetch(time time.Time, timezone, ipAddress string) (*model.Banner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", time, timezone, ipAddress)
	ret0, _ := ret[0].(*model.Banner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch
func (mr *MockBannerQueryMockRecorder) Fetch(time, timezone, ipAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockBannerQuery)(nil).Fetch), time, timezone, ipAddress)
}

// Displayed mocks base method
func (m *MockBannerQuery) Displayed(banner model.Banner, time time.Time, timezone, ipAddress string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Displayed", banner, time, timezone, ipAddress)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Displayed indicates an expected call of Displayed
func (mr *MockBannerQueryMockRecorder) Displayed(banner, time, timezone, ipAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Displayed", reflect.TypeOf((*MockBannerQuery)(nil).Displayed), banner, time, timezone, ipAddress)
}
